1. Перечислите основные свойства NODE.JS
Управляемый событиями и неблокирующий ввод-вывод: Node.js построен на
управляемой событиями и неблокирующей модели ввода-вывода, что
позволяет ему обрабатывать большое количество одновременных
подключений, не блокируя выполнение других задач. Это делает его хорошо
подходящим для создания приложений, работающих в режиме реального
времени, с интенсивным использованием данных, требующих высокой
производительности.
Кроссплатформенность: Node.js предназначен для работы на нескольких
платформах, включая Windows, Linux и macOS. Это упрощает разработку и
развертывание приложений в различных операционных системах.
Однопоточный, но хорошо масштабируемый: Node.js является
однопоточным, что означает, что он может выполнять только одну задачу за
раз. Однако он использует цикл обработки событий и пул потоков для
одновременной обработки нескольких запросов, что делает его высоко
масштабируемым и эффективным.
Легкий и быстрый: Node.js построен на движке JavaScript V8, известном своей
скоростью и эффективностью. Это делает Node.js легким и быстрым, позволяя
обрабатывать большое количество запросов с высокой пропускной
способностью.
NPM: Node.js поставляется с мощным менеджером пакетов под названием
NPM, который позволяет разработчикам легко устанавливать сторонние
пакеты и модули и управлять ими. Это способствовало созданию динамичной
экосистемы пакетов с открытым исходным кодом, которые можно
использовать для создания приложений Node.js.
Полный стек JavaScript: Node.js позволяет разработчикам использовать
JavaScript как на стороне клиента, так и на стороне сервера своих приложений,
что упрощает совместное использование кода и поддерживает
согласованность на протяжении всего процесса разработки.
2. Что такое npm?
NPM: Node.js поставляется с мощным менеджером пакетов под названием
NPM, который позволяет разработчикам легко устанавливать сторонние
пакеты и модули и управлять ими. Это способствовало созданию динамичной
экосистемы пакетов с открытым исходным кодом, которые можно
использовать для создания приложений Node.js.
3. Поясните назначение HTTP-заголовка Content-Type.
Назначение этого поля - наиболее полное описание данных, содержащихся в теле, с тем, чтобы почтовый агент (программа) получателя могла выбрать соответствующий механизм для их обаботки. Впервые это поле было определено в RFC 1049, но имело более простой синтаксис.
4. Поясните назначение функции require.
require() — это встроенная функция для включения внешних модулей, которые существуют в отдельных файлах. Оператор require() читает файл JavaScript, выполняет его, а затем возвращает экспортированный объект. Он позволяет добавлять встроенные модули NodeJS, те, что разработаны сообществом, а также локальные модули.
5. Поясните понятие «Модуль Node.js».
Node.js использует модульную систему. То есть вся встроенная функциональность разбита на отдельные пакеты или модули. Модуль представляет блок кода, который может использоваться повторно в других модулях.
6. Поясните понятие «Node.js built-in modules» («Node.js Core modules»). 
Node.js имеет набор встроенных модулей, которые можно использовать без дополнительной установки. (fs, url, http)
7. Какой модуль NODE.JS обеспечивает работу с протоколом HTTP?
http
8. Какой модуль NODE.JS обеспечивает работу с файловой системой?
fs

XMLHttpRequest (XHR) - это стандартный объект JavaScript, который позволяет отправлять HTTP-запросы и получать ответы без перезагрузки страницы. Он имеет сложный и громоздкий интерфейс, но также предоставляет множество возможностей для настройки запросов.

jQuery - это библиотека JavaScript, которая упрощает работу с JavaScript, в том числе с XHR. jQuery предоставляет удобный интерфейс для отправки запросов и получения ответов, а также обработки ошибок и работы с данными в формате JSON.

Fetch - это новый стандартный API для отправки запросов на сервер, который заменяет XHR. Он предоставляет более простой интерфейс, чем XHR, и позволяет отправлять запросы с помощью промисов, что упрощает обработку асинхронного кода. Он также поддерживает потоки и управление кэшированием запросов.